// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLAIM_SYNERGY_PROTOCOL_V2_FB_H_
#define FLATBUFFERS_GENERATED_CLAIM_SYNERGY_PROTOCOL_V2_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace synergy {
namespace protocol {
namespace v2 {
namespace fb {

struct ServerClaim;
struct ServerClaimT;

struct ServerClaimT : public flatbuffers::NativeTable {
  typedef ServerClaim TableType;
  uint32_t profile_id;
  uint32_t screen_id;
  ServerClaimT()
      : profile_id(0),
        screen_id(0) {
  }
};

struct ServerClaim FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServerClaimT NativeTableType;
  enum {
    VT_PROFILE_ID = 4,
    VT_SCREEN_ID = 6
  };
  uint32_t profile_id() const {
    return GetField<uint32_t>(VT_PROFILE_ID, 0);
  }
  uint32_t screen_id() const {
    return GetField<uint32_t>(VT_SCREEN_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PROFILE_ID) &&
           VerifyField<uint32_t>(verifier, VT_SCREEN_ID) &&
           verifier.EndTable();
  }
  ServerClaimT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ServerClaimT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ServerClaim> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServerClaimT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ServerClaimBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_profile_id(uint32_t profile_id) {
    fbb_.AddElement<uint32_t>(ServerClaim::VT_PROFILE_ID, profile_id, 0);
  }
  void add_screen_id(uint32_t screen_id) {
    fbb_.AddElement<uint32_t>(ServerClaim::VT_SCREEN_ID, screen_id, 0);
  }
  explicit ServerClaimBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServerClaimBuilder &operator=(const ServerClaimBuilder &);
  flatbuffers::Offset<ServerClaim> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServerClaim>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServerClaim> CreateServerClaim(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t profile_id = 0,
    uint32_t screen_id = 0) {
  ServerClaimBuilder builder_(_fbb);
  builder_.add_screen_id(screen_id);
  builder_.add_profile_id(profile_id);
  return builder_.Finish();
}

flatbuffers::Offset<ServerClaim> CreateServerClaim(flatbuffers::FlatBufferBuilder &_fbb, const ServerClaimT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ServerClaimT *ServerClaim::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ServerClaimT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ServerClaim::UnPackTo(ServerClaimT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = profile_id(); _o->profile_id = _e; };
  { auto _e = screen_id(); _o->screen_id = _e; };
}

inline flatbuffers::Offset<ServerClaim> ServerClaim::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServerClaimT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateServerClaim(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ServerClaim> CreateServerClaim(flatbuffers::FlatBufferBuilder &_fbb, const ServerClaimT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ServerClaimT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _profile_id = _o->profile_id;
  auto _screen_id = _o->screen_id;
  return synergy::protocol::v2::fb::CreateServerClaim(
      _fbb,
      _profile_id,
      _screen_id);
}

}  // namespace fb
}  // namespace v2
}  // namespace protocol
}  // namespace synergy

#endif  // FLATBUFFERS_GENERATED_CLAIM_SYNERGY_PROTOCOL_V2_FB_H_
