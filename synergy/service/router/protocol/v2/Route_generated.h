// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROUTE_SYNERGY_PROTOCOL_V2_FB_H_
#define FLATBUFFERS_GENERATED_ROUTE_SYNERGY_PROTOCOL_V2_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace synergy {
namespace protocol {
namespace v2 {
namespace fb {

struct Route;
struct RouteT;

struct RouteAdvertisement;
struct RouteAdvertisementT;

struct RouteT : public flatbuffers::NativeTable {
  typedef Route TableType;
  uint32_t dest;
  uint32_t cost;
  std::vector<uint32_t> path;
  RouteT()
      : dest(0),
        cost(0) {
  }
};

struct Route FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RouteT NativeTableType;
  enum {
    VT_DEST = 4,
    VT_COST = 6,
    VT_PATH = 8
  };
  uint32_t dest() const {
    return GetField<uint32_t>(VT_DEST, 0);
  }
  uint32_t cost() const {
    return GetField<uint32_t>(VT_COST, 0);
  }
  const flatbuffers::Vector<uint32_t> *path() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEST) &&
           VerifyField<uint32_t>(verifier, VT_COST) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.Verify(path()) &&
           verifier.EndTable();
  }
  RouteT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RouteT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Route> Pack(flatbuffers::FlatBufferBuilder &_fbb, const RouteT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RouteBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dest(uint32_t dest) {
    fbb_.AddElement<uint32_t>(Route::VT_DEST, dest, 0);
  }
  void add_cost(uint32_t cost) {
    fbb_.AddElement<uint32_t>(Route::VT_COST, cost, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> path) {
    fbb_.AddOffset(Route::VT_PATH, path);
  }
  RouteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RouteBuilder &operator=(const RouteBuilder &);
  flatbuffers::Offset<Route> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Route>(end);
    return o;
  }
};

inline flatbuffers::Offset<Route> CreateRoute(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t dest = 0,
    uint32_t cost = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> path = 0) {
  RouteBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_cost(cost);
  builder_.add_dest(dest);
  return builder_.Finish();
}

inline flatbuffers::Offset<Route> CreateRouteDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t dest = 0,
    uint32_t cost = 0,
    const std::vector<uint32_t> *path = nullptr) {
  return synergy::protocol::v2::fb::CreateRoute(
      _fbb,
      dest,
      cost,
      path ? _fbb.CreateVector<uint32_t>(*path) : 0);
}

flatbuffers::Offset<Route> CreateRoute(flatbuffers::FlatBufferBuilder &_fbb, const RouteT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RouteAdvertisementT : public flatbuffers::NativeTable {
  typedef RouteAdvertisement TableType;
  uint32_t sender;
  std::vector<copy_ptr<RouteT>> routes;
  RouteAdvertisementT()
      : sender(0) {
  }
};

struct RouteAdvertisement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RouteAdvertisementT NativeTableType;
  enum {
    VT_SENDER = 4,
    VT_ROUTES = 6
  };
  uint32_t sender() const {
    return GetField<uint32_t>(VT_SENDER, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Route>> *routes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Route>> *>(VT_ROUTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SENDER) &&
           VerifyOffset(verifier, VT_ROUTES) &&
           verifier.Verify(routes()) &&
           verifier.VerifyVectorOfTables(routes()) &&
           verifier.EndTable();
  }
  RouteAdvertisementT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RouteAdvertisementT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<RouteAdvertisement> Pack(flatbuffers::FlatBufferBuilder &_fbb, const RouteAdvertisementT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RouteAdvertisementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sender(uint32_t sender) {
    fbb_.AddElement<uint32_t>(RouteAdvertisement::VT_SENDER, sender, 0);
  }
  void add_routes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Route>>> routes) {
    fbb_.AddOffset(RouteAdvertisement::VT_ROUTES, routes);
  }
  RouteAdvertisementBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RouteAdvertisementBuilder &operator=(const RouteAdvertisementBuilder &);
  flatbuffers::Offset<RouteAdvertisement> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RouteAdvertisement>(end);
    return o;
  }
};

inline flatbuffers::Offset<RouteAdvertisement> CreateRouteAdvertisement(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sender = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Route>>> routes = 0) {
  RouteAdvertisementBuilder builder_(_fbb);
  builder_.add_routes(routes);
  builder_.add_sender(sender);
  return builder_.Finish();
}

inline flatbuffers::Offset<RouteAdvertisement> CreateRouteAdvertisementDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sender = 0,
    const std::vector<flatbuffers::Offset<Route>> *routes = nullptr) {
  return synergy::protocol::v2::fb::CreateRouteAdvertisement(
      _fbb,
      sender,
      routes ? _fbb.CreateVector<flatbuffers::Offset<Route>>(*routes) : 0);
}

flatbuffers::Offset<RouteAdvertisement> CreateRouteAdvertisement(flatbuffers::FlatBufferBuilder &_fbb, const RouteAdvertisementT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RouteT *Route::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new RouteT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Route::UnPackTo(RouteT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = dest(); _o->dest = _e; };
  { auto _e = cost(); _o->cost = _e; };
  { auto _e = path(); if (_e) { _o->path.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->path[_i] = _e->Get(_i); } } };
}

inline flatbuffers::Offset<Route> Route::Pack(flatbuffers::FlatBufferBuilder &_fbb, const RouteT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRoute(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Route> CreateRoute(flatbuffers::FlatBufferBuilder &_fbb, const RouteT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const RouteT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _dest = _o->dest;
  auto _cost = _o->cost;
  auto _path = _o->path.size() ? _fbb.CreateVector(_o->path) : 0;
  return synergy::protocol::v2::fb::CreateRoute(
      _fbb,
      _dest,
      _cost,
      _path);
}

inline RouteAdvertisementT *RouteAdvertisement::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new RouteAdvertisementT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void RouteAdvertisement::UnPackTo(RouteAdvertisementT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = sender(); _o->sender = _e; };
  { auto _e = routes(); if (_e) { _o->routes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->routes[_i] = copy_ptr<RouteT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<RouteAdvertisement> RouteAdvertisement::Pack(flatbuffers::FlatBufferBuilder &_fbb, const RouteAdvertisementT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRouteAdvertisement(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<RouteAdvertisement> CreateRouteAdvertisement(flatbuffers::FlatBufferBuilder &_fbb, const RouteAdvertisementT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const RouteAdvertisementT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _sender = _o->sender;
  auto _routes = _o->routes.size() ? _fbb.CreateVector<flatbuffers::Offset<Route>> (_o->routes.size(), [](size_t i, _VectorArgs *__va) { return CreateRoute(*__va->__fbb, __va->__o->routes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return synergy::protocol::v2::fb::CreateRouteAdvertisement(
      _fbb,
      _sender,
      _routes);
}

}  // namespace fb
}  // namespace v2
}  // namespace protocol
}  // namespace synergy

#endif  // FLATBUFFERS_GENERATED_ROUTE_SYNERGY_PROTOCOL_V2_FB_H_
