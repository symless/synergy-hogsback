// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CORE_SYNERGY_PROTOCOL_V2_FB_H_
#define FLATBUFFERS_GENERATED_CORE_SYNERGY_PROTOCOL_V2_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace synergy {
namespace protocol {
namespace v2 {
namespace fb {

struct CoreMessage;
struct CoreMessageT;

struct CoreMessageT : public flatbuffers::NativeTable {
  typedef CoreMessage TableType;
  std::vector<uint8_t> data;
  uint32_t connection;
  CoreMessageT()
      : connection(0) {
  }
};

struct CoreMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CoreMessageT NativeTableType;
  enum {
    VT_DATA = 4,
    VT_CONNECTION = 6
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  uint32_t connection() const {
    return GetField<uint32_t>(VT_CONNECTION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           VerifyField<uint32_t>(verifier, VT_CONNECTION) &&
           verifier.EndTable();
  }
  CoreMessageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CoreMessageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CoreMessage> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CoreMessageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CoreMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(CoreMessage::VT_DATA, data);
  }
  void add_connection(uint32_t connection) {
    fbb_.AddElement<uint32_t>(CoreMessage::VT_CONNECTION, connection, 0);
  }
  explicit CoreMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CoreMessageBuilder &operator=(const CoreMessageBuilder &);
  flatbuffers::Offset<CoreMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CoreMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<CoreMessage> CreateCoreMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
    uint32_t connection = 0) {
  CoreMessageBuilder builder_(_fbb);
  builder_.add_connection(connection);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<CoreMessage> CreateCoreMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    uint32_t connection = 0) {
  return synergy::protocol::v2::fb::CreateCoreMessage(
      _fbb,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0,
      connection);
}

flatbuffers::Offset<CoreMessage> CreateCoreMessage(flatbuffers::FlatBufferBuilder &_fbb, const CoreMessageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CoreMessageT *CoreMessage::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CoreMessageT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void CoreMessage::UnPackTo(CoreMessageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } };
  { auto _e = connection(); _o->connection = _e; };
}

inline flatbuffers::Offset<CoreMessage> CoreMessage::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CoreMessageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCoreMessage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CoreMessage> CreateCoreMessage(flatbuffers::FlatBufferBuilder &_fbb, const CoreMessageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CoreMessageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  auto _connection = _o->connection;
  return synergy::protocol::v2::fb::CreateCoreMessage(
      _fbb,
      _data,
      _connection);
}

}  // namespace fb
}  // namespace v2
}  // namespace protocol
}  // namespace synergy

#endif  // FLATBUFFERS_GENERATED_CORE_SYNERGY_PROTOCOL_V2_FB_H_
