// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HELLO_SYNERGY_PROTOCOL_V2_FB_H_
#define FLATBUFFERS_GENERATED_HELLO_SYNERGY_PROTOCOL_V2_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace synergy {
namespace protocol {
namespace v2 {
namespace fb {

struct Version;
struct VersionT;

struct Hello;
struct HelloT;

enum class OS : uint8_t {
  Unknown = 0,
  Linux = 64,
  macOS = 128,
  Windows = 192,
  MIN = Unknown,
  MAX = Windows
};

inline OS (&EnumValuesOS())[4] {
  static OS values[] = {
    OS::Unknown,
    OS::Linux,
    OS::macOS,
    OS::Windows
  };
  return values;
}

struct VersionT : public flatbuffers::NativeTable {
  typedef Version TableType;
  uint8_t major_num;
  uint8_t minor_num;
  uint8_t patch_num;
  std::string tag;
  std::string revision;
  VersionT()
      : major_num(0),
        minor_num(0),
        patch_num(0) {
  }
};

struct Version FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VersionT NativeTableType;
  enum {
    VT_MAJOR_NUM = 4,
    VT_MINOR_NUM = 6,
    VT_PATCH_NUM = 8,
    VT_TAG = 10,
    VT_REVISION = 12
  };
  uint8_t major_num() const {
    return GetField<uint8_t>(VT_MAJOR_NUM, 0);
  }
  uint8_t minor_num() const {
    return GetField<uint8_t>(VT_MINOR_NUM, 0);
  }
  uint8_t patch_num() const {
    return GetField<uint8_t>(VT_PATCH_NUM, 0);
  }
  const flatbuffers::String *tag() const {
    return GetPointer<const flatbuffers::String *>(VT_TAG);
  }
  const flatbuffers::String *revision() const {
    return GetPointer<const flatbuffers::String *>(VT_REVISION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MAJOR_NUM) &&
           VerifyField<uint8_t>(verifier, VT_MINOR_NUM) &&
           VerifyField<uint8_t>(verifier, VT_PATCH_NUM) &&
           VerifyOffset(verifier, VT_TAG) &&
           verifier.Verify(tag()) &&
           VerifyOffset(verifier, VT_REVISION) &&
           verifier.Verify(revision()) &&
           verifier.EndTable();
  }
  VersionT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VersionT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Version> Pack(flatbuffers::FlatBufferBuilder &_fbb, const VersionT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VersionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_major_num(uint8_t major_num) {
    fbb_.AddElement<uint8_t>(Version::VT_MAJOR_NUM, major_num, 0);
  }
  void add_minor_num(uint8_t minor_num) {
    fbb_.AddElement<uint8_t>(Version::VT_MINOR_NUM, minor_num, 0);
  }
  void add_patch_num(uint8_t patch_num) {
    fbb_.AddElement<uint8_t>(Version::VT_PATCH_NUM, patch_num, 0);
  }
  void add_tag(flatbuffers::Offset<flatbuffers::String> tag) {
    fbb_.AddOffset(Version::VT_TAG, tag);
  }
  void add_revision(flatbuffers::Offset<flatbuffers::String> revision) {
    fbb_.AddOffset(Version::VT_REVISION, revision);
  }
  VersionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VersionBuilder &operator=(const VersionBuilder &);
  flatbuffers::Offset<Version> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Version>(end);
    return o;
  }
};

inline flatbuffers::Offset<Version> CreateVersion(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t major_num = 0,
    uint8_t minor_num = 0,
    uint8_t patch_num = 0,
    flatbuffers::Offset<flatbuffers::String> tag = 0,
    flatbuffers::Offset<flatbuffers::String> revision = 0) {
  VersionBuilder builder_(_fbb);
  builder_.add_revision(revision);
  builder_.add_tag(tag);
  builder_.add_patch_num(patch_num);
  builder_.add_minor_num(minor_num);
  builder_.add_major_num(major_num);
  return builder_.Finish();
}

inline flatbuffers::Offset<Version> CreateVersionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t major_num = 0,
    uint8_t minor_num = 0,
    uint8_t patch_num = 0,
    const char *tag = nullptr,
    const char *revision = nullptr) {
  return synergy::protocol::v2::fb::CreateVersion(
      _fbb,
      major_num,
      minor_num,
      patch_num,
      tag ? _fbb.CreateString(tag) : 0,
      revision ? _fbb.CreateString(revision) : 0);
}

flatbuffers::Offset<Version> CreateVersion(flatbuffers::FlatBufferBuilder &_fbb, const VersionT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HelloT : public flatbuffers::NativeTable {
  typedef Hello TableType;
  uint32_t id;
  std::string name;
  copy_ptr<VersionT> version;
  OS os;
  HelloT()
      : id(0),
        os(OS::Unknown) {
  }
};

struct Hello FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HelloT NativeTableType;
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_VERSION = 8,
    VT_OS = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Version *version() const {
    return GetPointer<const Version *>(VT_VERSION);
  }
  OS os() const {
    return static_cast<OS>(GetField<uint8_t>(VT_OS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyTable(version()) &&
           VerifyField<uint8_t>(verifier, VT_OS) &&
           verifier.EndTable();
  }
  HelloT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HelloT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Hello> Pack(flatbuffers::FlatBufferBuilder &_fbb, const HelloT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HelloBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Hello::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Hello::VT_NAME, name);
  }
  void add_version(flatbuffers::Offset<Version> version) {
    fbb_.AddOffset(Hello::VT_VERSION, version);
  }
  void add_os(OS os) {
    fbb_.AddElement<uint8_t>(Hello::VT_OS, static_cast<uint8_t>(os), 0);
  }
  HelloBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HelloBuilder &operator=(const HelloBuilder &);
  flatbuffers::Offset<Hello> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Hello>(end);
    return o;
  }
};

inline flatbuffers::Offset<Hello> CreateHello(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<Version> version = 0,
    OS os = OS::Unknown) {
  HelloBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_os(os);
  return builder_.Finish();
}

inline flatbuffers::Offset<Hello> CreateHelloDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    flatbuffers::Offset<Version> version = 0,
    OS os = OS::Unknown) {
  return synergy::protocol::v2::fb::CreateHello(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      version,
      os);
}

flatbuffers::Offset<Hello> CreateHello(flatbuffers::FlatBufferBuilder &_fbb, const HelloT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VersionT *Version::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new VersionT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Version::UnPackTo(VersionT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = major_num(); _o->major_num = _e; };
  { auto _e = minor_num(); _o->minor_num = _e; };
  { auto _e = patch_num(); _o->patch_num = _e; };
  { auto _e = tag(); if (_e) _o->tag = _e->str(); };
  { auto _e = revision(); if (_e) _o->revision = _e->str(); };
}

inline flatbuffers::Offset<Version> Version::Pack(flatbuffers::FlatBufferBuilder &_fbb, const VersionT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVersion(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Version> CreateVersion(flatbuffers::FlatBufferBuilder &_fbb, const VersionT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const VersionT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _major_num = _o->major_num;
  auto _minor_num = _o->minor_num;
  auto _patch_num = _o->patch_num;
  auto _tag = _o->tag.empty() ? 0 : _fbb.CreateString(_o->tag);
  auto _revision = _o->revision.empty() ? 0 : _fbb.CreateString(_o->revision);
  return synergy::protocol::v2::fb::CreateVersion(
      _fbb,
      _major_num,
      _minor_num,
      _patch_num,
      _tag,
      _revision);
}

inline HelloT *Hello::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new HelloT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Hello::UnPackTo(HelloT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; };
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = version(); if (_e) _o->version = copy_ptr<VersionT>(_e->UnPack(_resolver)); };
  { auto _e = os(); _o->os = _e; };
}

inline flatbuffers::Offset<Hello> Hello::Pack(flatbuffers::FlatBufferBuilder &_fbb, const HelloT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHello(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Hello> CreateHello(flatbuffers::FlatBufferBuilder &_fbb, const HelloT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const HelloT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _version = _o->version ? CreateVersion(_fbb, _o->version.get(), _rehasher) : 0;
  auto _os = _o->os;
  return synergy::protocol::v2::fb::CreateHello(
      _fbb,
      _id,
      _name,
      _version,
      _os);
}

}  // namespace fb
}  // namespace v2
}  // namespace protocol
}  // namespace synergy

#endif  // FLATBUFFERS_GENERATED_HELLO_SYNERGY_PROTOCOL_V2_FB_H_
